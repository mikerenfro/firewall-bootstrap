#!/usr/bin/env python

from system_database import SYSTEM_DATABASE
import string, os, socket

FQDN=socket.getfqdn()
LOCAL_DOMAIN=string.join(string.split(FQDN,'.')[1:],'.')

MARARC_PREAMBLE="""### File generated by dns-regen --
### no manual edits allowed
# Basic settings
bind_address = "127.0.0.1,__ETH1_IP__"
chroot_dir = "/etc/maradns"
maradns_uid = 103
maradns_gid = 106
maxprocs = 96
no_fingerprint = 0
default_rrany_set = 3
max_chain = 8
max_ar_chain = 1
max_total = 20
verbose_level = 1
csv2 = {}
ipv4_alias = {}
upstream_servers = {}

# Local server settings
csv2["~LOCAL_DOMAIN~."] = "db.~LOCAL_DOMAIN~"
ipv4_alias["localhost"] = "127.0.0.0/8"
ipv4_alias["local"] = "__ETH1_NETWORK__/24"
recursive_acl = "local,localhost"

# Upstream server settings
upstream_servers["."] = "8.8.8.8"
"""

DNS_DB_PREAMBLE="""
### File generated by dhcp-dns-regen -- no manual edits allowed
%       ns ns1.% ~
ns1.%   a  __ETH1_IP__ ~
"""
DNS_DB_POSTAMBLE="""
# Put any CNAME or other non-address entries below
"""

# double up the literal percents here. Didn't have to do that on the
# triple-quoted strings, since those don't get parsed the same way
DNS_FORWARD_LINE="%s.%% a %s ~\n" # hostname, ip
DNS_REVERSE_LINE="%s.in-addr.arpa. ptr %s.%% ~\n" # reversed ip, hostname

MARARC_PREAMBLE = MARARC_PREAMBLE.replace('~LOCAL_DOMAIN~',LOCAL_DOMAIN)

def main():
    with open('/etc/maradns/mararc','w') as mararc:
        mararc.write(MARARC_PREAMBLE)
        # nothing host-specific to write to mararc

    dbfile = '/etc/maradns/db.%s' % (LOCAL_DOMAIN)
    with open(dbfile,'w') as db_domain:
        db_domain.write(DNS_DB_PREAMBLE)
        for entry in SYSTEM_DATABASE:
            hostname, mac, ip = entry
            db_domain.write(DNS_FORWARD_LINE % (hostname, ip))
            octets = string.split(ip,'.')
            octets.reverse()
            reverse_ip = string.join(octets,'.')
            db_domain.write(DNS_REVERSE_LINE % (reverse_ip, hostname))
        db_domain.write(DNS_DB_POSTAMBLE)

    os.system("/etc/init.d/maradns restart")

if __name__ == "__main__":
    main()
