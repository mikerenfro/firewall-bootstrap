#!/usr/bin/env python

# See http://www.cymru.com/Documents/secure-bind-template.html for more

from system_database import SYSTEM_DATABASE, DEFAULT_DOMAIN, DEFAULT_NETWORK
import string, os, socket
from datetime import date

FQDN=socket.getfqdn()
LOCAL_DOMAIN=string.join(string.split(FQDN,'.')[1:],'.')

DNS_FORWARD_PREAMBLE="""
; File generated by dns-regen -- no manual edits allowed
$TTL 3600
@ IN SOA router.__DOMAIN__. root.__DOMAIN__. (
  __N__ ; __SERIAL__
  3600
  600
  86400
  600 )
;
@ IN NS router.__DOMAIN__.
@ IN MX 10 router.__DOMAIN__.
"""
DNS_FORWARD_POSTAMBLE="""
"""
DNS_REVERSE_PREAMBLE="""
; File generated by dns-regen -- no manual edits allowed
$TTL 3600
@ IN SOA router.__DOMAIN__. root.__DOMAIN__. (
  __N__ ; __SERIAL__
  3600
  600
  86400
  600 )
;
@ IN NS router.__DOMAIN__.
"""
DNS_REVERSE_POSTAMBLE="""
"""

DNS_FORWARD_LINE="%s IN A %s\n" # hostname, ip
DNS_CNAME_LINE="%s IN CNAME %s\n" # alias, hostname
DNS_REVERSE_LINE="%s IN PTR %s.%s.\n" # last octet of ip, hostname, domain

DNS_FORWARD_PREAMBLE = DNS_FORWARD_PREAMBLE.replace("__DOMAIN__",
                                                    DEFAULT_DOMAIN)
DNS_REVERSE_PREAMBLE = DNS_REVERSE_PREAMBLE.replace("__DOMAIN__",
                                                    DEFAULT_DOMAIN)

CONF_FILE_CONTENT="""
// File generated by dns-regen -- no manual edits allowed
zone "__DOMAIN__" {
    type master;
    file "/etc/bind/db.__DOMAIN__";
    };
zone "__NETWORK_REVERSED__.in-addr.arpa" {
    type master;
    file "/etc/bind/db.__DEFAULT_NETWORK__";
    };
"""

def main():
    global DNS_FORWARD_PREAMBLE, DNS_FORWARD_POSTAMBLE
    global DNS_REVERSE_PREAMBLE, DNS_REVERSE_POSTAMBLE
    global DNS_FOWARD_LINE, DNS_CNAME_LINE, DNS_REVERSE_LINE
    global CONF_FILE_CONTENT

    forward_file = "/etc/bind/db.%s" % (DEFAULT_DOMAIN)
    serial = None
    try:
        with open(forward_file,'r') as forward:
            # find current serial number, if any
            lines = forward.readlines()
        for line in lines:
            if "__SERIAL__" in line:
                # grab first field in line as current serial
                ( serial, _, _ ) = line.split()
                break
    except IOError:
        pass

    todayDate = date.today().strftime("%Y%m%d")
    # print "Today's date: %s" % (todayDate)
    if serial is not None:
        serialDate = serial[:8]
        serialIndex = serial[8:]
        # print "Extracted serial: %s" % (serial)
        # print "Date of serial: %s" % (serialDate)
        # print "Index of serial: %s" % (serialIndex)
        if serialDate == todayDate:
            # increment serialIndex by 1
            serialIndex = int(serialIndex) + 1
            newSerial = "%s%02d" % (todayDate, serialIndex)
        else:
            # make new serial for today
            newSerial = "%s01" % (todayDate)
    else:
        # make new serial for today
        newSerial = "%s01" % (todayDate)
        
    # print "New serial: %s" % (newSerial)

    with open(forward_file,'w') as forward:
        # print DNS_FORWARD_PREAMBLE
        DNS_FORWARD_PREAMBLE = DNS_FORWARD_PREAMBLE.replace("__N__",
                                                            newSerial)
        forward.write(DNS_FORWARD_PREAMBLE)
        for entry in SYSTEM_DATABASE:
            hostname, mac, ip = ( entry['host'],
                                  entry['mac'],
                                  entry['ip'] )
            forward.write(DNS_FORWARD_LINE % (hostname, ip))
            if 'aliases' in entry:
                for alias in entry['aliases']:
                    forward.write(DNS_CNAME_LINE % (alias, hostname))

        forward.write(DNS_FORWARD_POSTAMBLE)

    networkFields = DEFAULT_NETWORK.split('.')
    networkFields.reverse()
    reverseNetwork = string.join(networkFields,'.')
    reverse_file = "/etc/bind/db.%s" % (reverseNetwork)
    with open(reverse_file,'w') as forward:
        # print DNS_REVERSE_PREAMBLE
        DNS_REVERSE_PREAMBLE = DNS_REVERSE_PREAMBLE.replace("__N__",
                                                            newSerial)
        forward.write(DNS_REVERSE_PREAMBLE)
        for entry in SYSTEM_DATABASE:
            hostname, mac, ip = ( entry['host'],
                                  entry['mac'],
                                  entry['ip'] )
            (_, _, _, lastOctet) = ip.split('.',4)
            forward.write(DNS_REVERSE_LINE % (lastOctet, hostname,
                                              DEFAULT_DOMAIN))
        forward.write(DNS_REVERSE_POSTAMBLE)
        
    conf_file = "/etc/bind/named.conf.local"
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__DOMAIN__",DEFAULT_DOMAIN)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__NETWORK_REVERSED__",reverseNetwork)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__DEFAULT_NETWORK__",DEFAULT_NETWORK)
    with open(conf_file,'w') as conf:
        conf.write(CONF_FILE_CONTENT)

    os.system("service bind9 reload")

if __name__ == "__main__":
    main()
