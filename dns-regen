#!/usr/bin/env python

# See http://www.cymru.com/Documents/secure-bind-template.html for more

from system_database import SYSTEM_DATABASE_LOC, SYSTEM_DATABASE_DMZ
from system_database import DEFAULT_DOMAIN, LOC_NETWORK_PREFIX
from system_database import LOC_NETWORK, LOC_NETMASK_SHORT
from system_database import DMZ_NETWORK_PREFIX
from system_database import DMZ_NETWORK, DMZ_NETMASK_SHORT
import string, os, socket
from datetime import date
import netaddr

FQDN=socket.getfqdn()
HOSTNAME=FQDN.split('.')[0]
LOCAL_DOMAIN=string.join(string.split(FQDN,'.')[1:],'.')

DNS_FORWARD_PREAMBLE="""
; File generated by dns-regen -- no manual edits allowed
$TTL 3600
@ IN SOA __HOSTNAME__.__DOMAIN__. root.__DOMAIN__. (
  __N__ ; __SERIAL__
  3600
  600
  86400
  600 )
;
@ IN NS __HOSTNAME__.__DOMAIN__.
@ IN MX 10 __HOSTNAME__.__DOMAIN__.
"""
DNS_FORWARD_POSTAMBLE="""
; Uncomment the following line to delegate authority for ad.__DOMAIN__
; to a host of your choice (normally a domain controller)
; ad IN NS dc1.__DOMAIN__.
"""
DNS_REVERSE_PREAMBLE="""
; File generated by dns-regen -- no manual edits allowed
$TTL 3600
@ IN SOA __HOSTNAME__.__DOMAIN__. root.__DOMAIN__. (
  __N__ ; __SERIAL__
  3600
  600
  86400
  600 )
;
@ IN NS __HOSTNAME__.__DOMAIN__.
"""
DNS_REVERSE_POSTAMBLE="""
"""

DNS_FORWARD_LINE="%s IN A %s\n" # hostname, ip
DNS_CNAME_LINE="%s IN CNAME %s\n" # alias, hostname
DNS_REVERSE_LINE="%s IN PTR %s.%s.\n" # last octet of ip, hostname, domain

DNS_FORWARD_PREAMBLE = DNS_FORWARD_PREAMBLE.replace("__HOSTNAME__",
                                                    HOSTNAME)
DNS_FORWARD_PREAMBLE = DNS_FORWARD_PREAMBLE.replace("__DOMAIN__",
                                                    DEFAULT_DOMAIN)
DNS_FORWARD_POSTAMBLE = DNS_FORWARD_POSTAMBLE.replace("__HOSTNAME__",
                                                      HOSTNAME)
DNS_FORWARD_POSTAMBLE = DNS_FORWARD_POSTAMBLE.replace("__DOMAIN__",
                                                      DEFAULT_DOMAIN)
DNS_REVERSE_PREAMBLE = DNS_REVERSE_PREAMBLE.replace("__DOMAIN__",
                                                    DEFAULT_DOMAIN)
DNS_REVERSE_PREAMBLE = DNS_REVERSE_PREAMBLE.replace("__HOSTNAME__",
                                                    HOSTNAME)
DNS_REVERSE_POSTAMBLE = DNS_REVERSE_POSTAMBLE.replace("__DOMAIN__",
                                                      DEFAULT_DOMAIN)
DNS_REVERSE_POSTAMBLE = DNS_REVERSE_POSTAMBLE.replace("__HOSTNAME__",
                                                      HOSTNAME)

CONF_FILE_CONTENT="""
// File generated by dns-regen -- no manual edits allowed
// See also: http://www.cymru.com/Documents/secure-bind-template.html

acl "xfer" { none; };
acl "trusted" { localhost;
                __LOC_NETWORK__/__LOC_NETMASK_SHORT__;
                __DMZ_NETWORK__/__DMZ_NETMASK_SHORT__; };

view "internal-in" in {
    match-clients { trusted; }; 
    recursion yes; 
    additional-from-auth yes; 
    additional-from-cache yes;
    
    zone "__DOMAIN__" {
        type master;
        file "/etc/bind/db.__DOMAIN__";
        };
    zone "__NETWORK_REVERSED__.in-addr.arpa" {
        type master;
        file "/etc/bind/db.__DEFAULT_NETWORK_PREFIX__";
        };
    include "/etc/bind/named.conf.default-zones";
};

view "external-in" in {
    match-clients { any; }; 
    recursion no; 
    additional-from-auth no; 
    additional-from-cache no;

    zone "." {
        type hint;
        file "/etc/bind/db.root";
    };
    zone "__DOMAIN__" {
        type master;
        file "/etc/bind/db.__DOMAIN__";
        allow-query { any; };
        };
    zone "__NETWORK_REVERSED__.in-addr.arpa" {
        type master;
        file "/etc/bind/db.__DEFAULT_NETWORK_PREFIX__";
        allow-query { any; };
        };
}; 
"""

def main():
    global DNS_FORWARD_PREAMBLE, DNS_FORWARD_POSTAMBLE
    global DNS_REVERSE_PREAMBLE, DNS_REVERSE_POSTAMBLE
    global DNS_FOWARD_LINE, DNS_CNAME_LINE, DNS_REVERSE_LINE
    global CONF_FILE_CONTENT

    forward_file = "/etc/bind/db.%s" % (DEFAULT_DOMAIN)
    serial = None
    try:
        with open(forward_file,'r') as forward:
            # find current serial number, if any
            lines = forward.readlines()
        for line in lines:
            if "__SERIAL__" in line:
                # grab first field in line as current serial
                ( serial, _, _ ) = line.split()
                break
    except IOError:
        pass

    todayDate = date.today().strftime("%Y%m%d")
    # print "Today's date: %s" % (todayDate)
    if serial is not None:
        serialDate = serial[:8]
        serialIndex = serial[8:]
        # print "Extracted serial: %s" % (serial)
        # print "Date of serial: %s" % (serialDate)
        # print "Index of serial: %s" % (serialIndex)
        if serialDate == todayDate:
            # increment serialIndex by 1
            serialIndex = int(serialIndex) + 1
            newSerial = "%s%02d" % (todayDate, serialIndex)
        else:
            # make new serial for today
            newSerial = "%s01" % (todayDate)
    else:
        # make new serial for today
        newSerial = "%s01" % (todayDate)
        
    # print "New serial: %s" % (newSerial)

    with open(forward_file,'w') as forward:
        # print DNS_FORWARD_PREAMBLE
        DNS_FORWARD_PREAMBLE = DNS_FORWARD_PREAMBLE.replace("__N__",
                                                            newSerial)
        forward.write(DNS_FORWARD_PREAMBLE)
        for entry in SYSTEM_DATABASE_LOC:
            hostname, mac, ip = ( entry['host'],
                                  entry['mac'],
                                  entry['ip'] )
            forward.write(DNS_FORWARD_LINE % (hostname, ip))
            if 'aliases' in entry:
                for alias in entry['aliases']:
                    forward.write(DNS_CNAME_LINE % (alias, hostname))
        for entry in SYSTEM_DATABASE_DMZ:
            hostname, mac, ip = ( entry['host'],
                                  entry['mac'],
                                  entry['ip'] )
            forward.write(DNS_FORWARD_LINE % (hostname, ip))
            if 'aliases' in entry:
                for alias in entry['aliases']:
                    forward.write(DNS_CNAME_LINE % (alias, hostname))

        forward.write(DNS_FORWARD_POSTAMBLE)

    LOC_CIDR="%s/%s" % (LOC_NETWORK, LOC_NETMASK_SHORT)
    DMZ_CIDR="%s/%s" % (DMZ_NETWORK, DMZ_NETMASK_SHORT)
    TOTAL_CIDR = str(netaddr.cidr_merge([LOC_CIDR, DMZ_CIDR])[0])
    (DEFAULT_NETWORK, DEFAULT_NETMASK_SHORT) = TOTAL_CIDR.split('/')
    DEFAULT_NETWORK_PREFIX = string.join(DEFAULT_NETWORK.split('.')[0:3],'.')
    networkFields = DEFAULT_NETWORK_PREFIX.split('.')
    networkFields.reverse()
    reverseNetwork = string.join(networkFields,'.')
    reverse_file = "/etc/bind/db.%s" % (DEFAULT_NETWORK_PREFIX)
    with open(reverse_file,'w') as reverse:
        # print DNS_REVERSE_PREAMBLE
        DNS_REVERSE_PREAMBLE = DNS_REVERSE_PREAMBLE.replace("__N__",
                                                            newSerial)
        reverse.write(DNS_REVERSE_PREAMBLE)
        for entry in SYSTEM_DATABASE_LOC:
            hostname, mac, ip = ( entry['host'],
                                  entry['mac'],
                                  entry['ip'] )
            (_, _, _, lastOctet) = ip.split('.',4)
            reverse.write(DNS_REVERSE_LINE % (lastOctet, hostname,
                                              DEFAULT_DOMAIN))
        for entry in SYSTEM_DATABASE_DMZ:
            hostname, mac, ip = ( entry['host'],
                                  entry['mac'],
                                  entry['ip'] )
            (_, _, _, lastOctet) = ip.split('.',4)
            reverse.write(DNS_REVERSE_LINE % (lastOctet, hostname,
                                              DEFAULT_DOMAIN))
        reverse.write(DNS_REVERSE_POSTAMBLE)
        
    conf_file = "/etc/bind/named.conf.local"
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__DOMAIN__",DEFAULT_DOMAIN)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__LOC_NETWORK__",LOC_NETWORK)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__LOC_NETMASK_SHORT__",LOC_NETMASK_SHORT)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__DMZ_NETWORK__",DMZ_NETWORK)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__DMZ_NETMASK_SHORT__",DMZ_NETMASK_SHORT)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__DOMAIN__",DEFAULT_DOMAIN)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__NETWORK_REVERSED__",reverseNetwork)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__DEFAULT_NETWORK_PREFIX__",DEFAULT_NETWORK_PREFIX)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__DEFAULT_NETWORK__",DEFAULT_NETWORK)
    CONF_FILE_CONTENT = CONF_FILE_CONTENT.replace("__NETMASK_SHORT__",DEFAULT_NETMASK_SHORT)
    with open(conf_file,'w') as conf:
        conf.write(CONF_FILE_CONTENT)

    os.system("service bind9 reload")

if __name__ == "__main__":
    main()
